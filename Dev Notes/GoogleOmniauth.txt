This was set up with devise. Pre-installed gems:
    `gem dotenv-rails`
    `gem devise`

1. Added and bundle installed these gems:
    `gem 'omniauth', '~> 2.0', '>= 2.0.4'`
    `gem 'omniauth-google-oauth2', '~> 1.1', '>= 1.1.1'`
    `gem 'omniauth-rails_csrf_protection'`
Not entirely certain the `omniauth` gem was required for This

2. Created and set up a Google project API (https://console.cloud.google.com).
    `https://youtu.be/CnZnwV38cjo?si=r94GRMR5kFLpdQGX` was a useful resource for this stopped
Added the credentials i.e GOOGLE_CLIENT_ID & GOOGLE_CLIENT_SECRET to my .env file

3. Added the following omniauth configuration to the 'config/initializers/devise.rb' file:
    `Rails.application.config.middleware.use OmniAuth::Builder do 
        OmniAuth.config.allowed_request_methods = [:get, :post]

        provider :google_oauth2, ENV['GOOGLE_CLIENT_ID'], ENV['GOOGLE_CLIENT_SECRET'],
        {
        redirect_uri: 'http://localhost:3000/users/auth/google_oauth2/callback',
        scope: 'email,profile'
        }
    end`
The method used in my application is 'post' since I kept getting a warning of potential CSRF attacks using the 'get' method.
However, leaving out the 'get' method leads to an error 'Not found. Authentication passthru'

4. Added the scope for the omniauth controller in my routes:
    `devise_for :users, controllers: { 
        omniauth_callbacks: 'users/omniauth_callbacks'
    }`
Had to run `rails g devise:controllers users` to generate the devise controllers for the users model. This was necessary
for access to the omniauth_callbacks controller.

5. Updated the user model to allow for omniauth, specify the providers and include the method for signing in or creating an account
    `devise: :omniauthable, omniauth_providers: [:google_oauth2]`
You can instead use percent string syntax `%i[google_oauth2]` in place of the array literal syntax above
    `def self.from_omniauth(access_token)
        data = access_token.info
        user = User.where(email: data['email']).first
        user ||= User.create(
        email: data['email'],
        password: Devise.friendly_token(20),
        full_name: data['name'],
        avatar: data['image']
        )
        user
    end`

6. Updated the omniauth_callbacks controller. Added the line:
    `skip_before_action :verify_authenticity_token, only: [:google_oauth2]`
at the top of the controller and the following methods:
    `def google_oauth2
        @user = User.from_omniauth(auth)

        if @user.persisted?
        sign_in_and_redirect @user, event: :authentication
        else
        session['devise.google_data'] = auth.except(:extra)
        redirect_to new_user_registration_url, alert: @user.errors.full_messages.join("\n")
        end
    end
    def failure
        flash[:alert] = 'Google authentication failed, please register or login with email and password.'
        redirect_to new_user_session_path
    end
    private
    def auth
        @auth ||= request.env['omniauth.auth']
    end
The choice to include a private method is option. The same result can be achieved by using `request.env['omniauth.auth']`
in place of auth.

7. Finally updated the devise link in the shared links partial. This is the rendered link/button that initiates the omniauth request:
    `<%- if devise_mapping.omniauthable? %>
        <%= link_to user_google_oauth2_omniauth_authorize_path, method: :post, style: "border: none; outline: none" do  %>
            <%= image_tag('web_light_rd_ctn.svg', alt: 'Sign in with Google') %>
        <% end %>
    <% end %>`
This works well since I'm using google_oauth2 as my sole provider. If multiple providers are available, then the default code can be modified instead i.e:
    `<%- if devise_mapping.omniauthable? %>
        <%- resource_class.omniauth_providers.each do |provider| %>
            <%= button_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), data: { turbo: false } %><br />
        <% end %>
    <% end %>`

